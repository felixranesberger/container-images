(function(o,i){typeof exports=="object"&&typeof module<"u"?module.exports=i():typeof define=="function"&&define.amd?define(i):(o=typeof globalThis<"u"?globalThis:o||self,o.index=i())})(this,function(){"use strict";const o=s=>s.replace(/[A-Z]+(?![a-z])|[A-Z]/g,(e,n)=>(n?"-":"")+e.toLowerCase()),i=s=>{const{dataset:e}=s;if(Object.keys(e).length===0)return;const n=Object.entries(e).map(([t,r])=>[o(t),r]).filter(([t])=>(t==null?void 0:t.startsWith("source-"))||!1).map(([t,r])=>[t==null?void 0:t.replace("source-",""),r]);return Object.fromEntries(n)},f=s=>Object.entries(s).sort(([e],[n])=>e==="default"?1:n==="default"||parseInt(n,10)<=parseInt(e,10)?-1:1),c=s=>{const e=s.querySelector("source");if(e===null)return;const n=s.querySelector("img");if(n===null)return;const t=i(e);if(t===void 0)return;const r=f(t);new ResizeObserver(([l])=>{const{width:g}=l.contentRect,d=r.find(([u])=>Number.isNaN(parseInt(u,10))?!1:parseInt(u,10)<=g);if(d===void 0){e.srcset=t.default;return}const[,b]=d;e.srcset=b}).observe(n)};return s=>{s.forEach(e=>{const n={rootMargin:"200px"};if(e.hasAttribute("data-container-images-loading")&&e.getAttribute("data-container-images-loading")==="eager"){c(e);return}const r=new IntersectionObserver(([a])=>{a.isIntersecting&&(c(e),r.disconnect())},n);r.observe(e)})}});
